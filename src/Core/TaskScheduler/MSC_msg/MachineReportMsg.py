# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MSC_msg

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MachineReportMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MachineReportMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMachineReportMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MachineReportMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MachineReportMsg
    def Operation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # MachineReportMsg
    def ReturnDest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MachineReportMsg
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MachineReportMsg
    def MachineId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MachineReportMsg
    def MiscData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MachineReportMsg
    def FloatArrayTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MachineReportMsg
    def FloatArray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MachineReportMsg
    def FloatArrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # MachineReportMsg
    def FloatArrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MachineReportMsg
    def FloatArrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # MachineReportMsg
    def IntArrayTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MachineReportMsg
    def IntArray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MachineReportMsg
    def IntArrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MachineReportMsg
    def IntArrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MachineReportMsg
    def IntArrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def Start(builder): builder.StartObject(9)
def MachineReportMsgStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddOperation(builder, operation): builder.PrependInt16Slot(0, operation, 0)
def MachineReportMsgAddOperation(builder, operation):
    """This method is deprecated. Please switch to AddOperation."""
    return AddOperation(builder, operation)
def AddReturnDest(builder, returnDest): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(returnDest), 0)
def MachineReportMsgAddReturnDest(builder, returnDest):
    """This method is deprecated. Please switch to AddReturnDest."""
    return AddReturnDest(builder, returnDest)
def AddPriority(builder, priority): builder.PrependInt8Slot(2, priority, 0)
def MachineReportMsgAddPriority(builder, priority):
    """This method is deprecated. Please switch to AddPriority."""
    return AddPriority(builder, priority)
def AddMachineId(builder, machineId): builder.PrependInt64Slot(3, machineId, 0)
def MachineReportMsgAddMachineId(builder, machineId):
    """This method is deprecated. Please switch to AddMachineId."""
    return AddMachineId(builder, machineId)
def AddMiscData(builder, miscData): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(miscData), 0)
def MachineReportMsgAddMiscData(builder, miscData):
    """This method is deprecated. Please switch to AddMiscData."""
    return AddMiscData(builder, miscData)
def AddFloatArrayTag(builder, floatArrayTag): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(floatArrayTag), 0)
def MachineReportMsgAddFloatArrayTag(builder, floatArrayTag):
    """This method is deprecated. Please switch to AddFloatArrayTag."""
    return AddFloatArrayTag(builder, floatArrayTag)
def AddFloatArray(builder, floatArray): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(floatArray), 0)
def MachineReportMsgAddFloatArray(builder, floatArray):
    """This method is deprecated. Please switch to AddFloatArray."""
    return AddFloatArray(builder, floatArray)
def StartFloatArrayVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MachineReportMsgStartFloatArrayVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartFloatArrayVector(builder, numElems)
def AddIntArrayTag(builder, intArrayTag): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(intArrayTag), 0)
def MachineReportMsgAddIntArrayTag(builder, intArrayTag):
    """This method is deprecated. Please switch to AddIntArrayTag."""
    return AddIntArrayTag(builder, intArrayTag)
def AddIntArray(builder, intArray): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(intArray), 0)
def MachineReportMsgAddIntArray(builder, intArray):
    """This method is deprecated. Please switch to AddIntArray."""
    return AddIntArray(builder, intArray)
def StartIntArrayVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MachineReportMsgStartIntArrayVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartIntArrayVector(builder, numElems)
def End(builder): return builder.EndObject()
def MachineReportMsgEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)